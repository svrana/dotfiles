"
" .vimrc (shaw@vranix.com)
"
function! BuildComposer(info)
  if a:info.status != 'unchanged' || a:info.force
      !cargo build --release
  endif
endfunction

call plug#begin('~/.local/share/nvim/plugged')

Plug 'gmodarelli/solarize' 		" the colorscheme
Plug 'altercation/vim-colors-solarized'
Plug 'jelera/vim-javascript-syntax'
Plug 'pangloss/vim-javascript'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-commentary' 		" auto-commenting
Plug 'vim-scripts/DeleteTrailingWhitespace'
Plug 'vim-scripts/matchit.zip'
Plug 'ervandew/supertab'
Plug 'fatih/vim-go', { 'do': ':GoInstallBinaries' }
Plug 'othree/html5.vim'
Plug 'fs111/pydoc.vim'
Plug 'hynek/vim-python-pep8-indent'
Plug 'ingydotnet/yaml-vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'svrana/neomake'
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'zchee/deoplete-go'
Plug 'zchee/deoplete-jedi'
Plug 'ternjs/tern_for_vim'
Plug 'majutsushi/tagbar'
Plug 'farmergreg/vim-lastplace' 	" open file at last position
Plug 'jreybert/vimagit'
Plug 'junegunn/vim-peekaboo'
Plug 'kopischke/vim-fetch' 		" open file:lineno:colno see sf()
Plug 'euclio/vim-markdown-composer', { 'do': function('BuildComposer') }
Plug 'wellle/tmux-complete.vim' 	" completion from other tmux panes
Plug 'tmux-plugins/vim-tmux'
Plug 'tpope/vim-jdaddy' 		" json related (formatting)

" All of your Plugins must be added before the following line
call plug#end()

set mouse=a
set rtp+=$APPS/fzf

let mapleader = ","
let maplocalleader = ","

"let g:markdown_composer_autostart = 0

let g:airline_powerline_fonts = 1
let g:airline_section_b='' "Disable showing branch cause it crowds the filename
let g:airline_section_y='' "Disable filetype cause it's mostly useless

let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t' "no path,only filename
let g:airline#extensions#tabline#tab_min_count = 2
let g:airline#extensions#tabline#show_tab_type = 0
let g:airline#extensions#tabline#show_close_button = 0
let g:airline#extensions#tabline#show_tab_nr = 0
let g:airline#extensions#tabline#show_splits = 0
let g:airline#extensions#tabline#show_buffers = 0
let g:airline#extensions#tabline#buffer_min_count = 2
let g:airline_skip_empty_sections = 1
let g:airline#extensions#virtualenv#enabled = 1

let g:tagbar_autofocus = 0

" virtualenv for neovim, has neovim python package installed
let g:python3_host_prog = expand("$WORKON_HOME/neovim3/bin/python")
let g:python_host_prog  = expand("$WORKON_HOME/neovim2/bin/python")

let g:neomake_javascript_enabled_makers = ['eslint']
let g:neomake_verbose = 0

let g:peekaboo_delay=300

" Whitespace related
"
" To disable showing trailing whitespace:
" let g:ShowTrailingWhitespace = 0
" Auto-delete whitespace automatically, no ask
let g:DeleteTrailingWhitespace = 1
let g:DeleteTrailingWhitespace_Action = 'delete'

let g:deoplete#enable_at_startup = 1
" let g:deoplete#disable_auto_complete = 1
" autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif

set completeopt+=menu
set notimeout
set ttimeout
set ttimeoutlen=100
set backspace=indent,eol,start
set directory^=.config/nvim/swp
set nowrap
set nosol
" show nothing in window frame on exit
set titleold=
set scrollopt=ver
set ic
set smartcase
set incsearch
set nohlsearch
set inccommand=split
" placed here for webpack hmr
set backupcopy=yes

" make asterick search work in visual mode
vmap * "yy:let @/='\(' . @y . '\'<cr>n

if !empty($GRUF_CONFIG)
    source ${GRUF_CONFIG}/gruf.vimrc
end

set tags=tags,${GRUF_PROJECT}/tags

set comments=sr:/*,mb:*,exl:*/,://,b:#,:%:XCOMM,n:>,fb:-
set comments+=b:\"

" Turn on continuation of comment characters for all file types
"autocmd FileType * setlocal formatoptions+=caroq

autocmd FileType * setlocal formatoptions+=croq

autocmd BufRead gitcommit setlocal spell spelllang=en_US textwidth=72
autocmd BufRead gitcommit setlocal fo+=t

autocmd BufNewFile,BufRead,BufEnter *.erb setf ruby
autocmd BufNewFile,BufRead,BufEnter *.feature setf ruby
autocmd BufNewFile,BufRead,BufEnter *.gradle setf groovy
autocmd BufNewFile,BufRead,BufEnter *.json setf json
autocmd BufWritePost,BufEnter * Neomake

" When editing a file that requires root, try to save using sudo
cmap w!! %!sudo tee > /dev/null %

" ignore .pyc, .o, and .git in command-t and :e
set wildignore+=*.pyc,*.o,.git
set showmatch
set backupext=.bak
set backupdir=~/.config/nvim/bak
set sessionoptions=buffers,options,winpos,winsize,help,blank,globals,resize
set noerrorbells
set noshowmode "airline/powerline shows mode, so no need to show it
set showcmd
set helpheight=0
set visualbell
set t_vb=
set ruler
set laststatus=2
set go=ia
set noequalalways
set mousehide
set mousefocus
set mousemodel=extend

" vim -b: edit binary using xxd-format
augroup Binary
    au!
    au BufReadPre  *.bin let &bin=1
    au BufReadPost *.bin if &bin | %!xxd
    au BufReadPost *.bin set ft=xxd | endif
    au BufWritePre *.bin if &bin | %!xxd -r
    au BufWritePre *.bin endif
    au BufWritePost *.bin if &bin | %!xxd
    au BufWritePost *.bin set nomod | endif
augroup END

function! GotoDotfiles()
    cd $DOTFILES
endfun

map     \cf :call GetFile(expand("$DOTFILES"))<CR>
map!    \cf <ESC>:call GetFile(expand("$DOTFILES"))<CR>

map     \gc :call GotoDotfiles()<CR>
map!    \gc <ESC>:call GotoDotfile()<CR>

map 	\sp :split<CR>
map!	\sp <ESC>:split<CR>
nmap <silent> \ts :ts<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"  Function key mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map 	<F1> :w<CR>
map!  	<F1> <ESC>:w<CR>
map     <F3> :Explore<CR>
map!    <F3> <ESC>:Explore<CR>
map 	<F7> :!tlc<CR><CR>
map! 	<F7> <ESC>:!tlc<CR><CR>
map 	<F12> :q<CR>
map! 	<F12> <ESC>:q<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nmap n nmzz.`z
nmap N Nmzz.`z
nmap * *mzz.`z
nmap # #mzz.`z
nmap g* g*mzz.`z
nmap g# g#mzz.`z
"nmap gn :set invnu<CR>

noremap <silent> <leader>zz :TagbarToggle<CR>
"noremap <leader>md :ComposerStart<CR>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" alt mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map 	<m-n> :cn<CR>
map! 	<m-n> <ESC>:cn<CR>
map 	<m-p> :cp<CR>
map! 	<m-p> <ESC>:cp<CR>
map 	<m-f> :cfirst<CR>
map! 	<m-f> <ESC>:cfirst<CR>
map 	<m-l> :clist<CR>
map! 	<m-l> <ESC>:clist<CR>
map 	<m-o> :copen<CR>
map! 	<m-o> <ESC>:copen<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ctrl mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" buffers
map 	<c-p> :bp<CR>
map! 	<c-p> <esc>:bp<CR>
map 	<c-n> :bn<CR>
map! 	<c-n> <esc>:bn<CR>
map 	<c-j> :buffers<CR>
map! 	<c-j> <esc>:buffers<CR>
map 	<c-x> :bdelete<CR>
map! 	<c-x> <esc>:bdelete<CR>
map 	<c-/> :bdelete<CR>
map! 	<c-/> <esc>:bdelete<CR>

" tabs
map 	<c-s> :tabp<CR>
map! 	<c-s> <ESC>tabp<CR>
map     <c-h> :tabn<CR>
map!  	<c-h> <ESC>tabn<CR>
nnoremap \tt :tabnew<CR>
nnoremap \nt :tabnew<CR>

map 	<c-c> :make<CR>
" 5 ctrl-h jumps to buffer 5
"map 	<c-h> <C-^>
map 	- <C-W>-
map 	+ <C-W>+


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ctrl tag-related mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" goto next tag in taglist
map 	<c-=> :tnext<CR>
map! 	<c-=> <ESC>:tnext<CR>
" mapping something to <c-[> breaks function key mappings
"map 	<c-[> :pop<CR>
"map! 	<c-[> <ESC>:pop<CR>

" map pageup to something reasonable
map 	<c-d> <c-b>
map 	<c-r> :'a,'bs/^/#/<CR>
nnoremap \sv :source ~/.vimrc<CR>

" toggle highlighting when searching
nnoremap \th :set invhls hls?<CR>
" toggle paste mapping to avoid things like autoindent causing 'stepped' text
nnoremap \tp :set invpaste paste?<CR>
" remove comment block
nnoremap \rcb :'a,'bs/^#//<CR>
"set pastetoggle=<F4>

"
" JAVAC/ANT INTEGRATION (he quickfix)
" ':' command  what it does
" cn go to the next error
" cp go to the previous error
" cfirst go to the first error
" clast go to the last error
" clist list all of the errors
" copen open split window of errors
"
"set shell=/bin/bash
"set shellpipe=2>&1\|tee
"set makeef=$TMP/vim.##
"set makeprg=ant\ debug
"set makeprg=make\ -f\ Makefile
"autocmd BufRead *.java set efm=%A\ %#[javac]\ %f:%l:\ %m,%-Z\ %#[javac]\ %p^,%-C%.%#

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Colorschemes
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if has('gui_running')
    set background=light
else
    set background=dark
endif

colorscheme solarized

map <M-Esc>[62~ <MouseDown>
map! <M-Esc>[62~ <MouseDown>
map <M-Esc>[63~ <MouseUp>
map! <M-Esc>[63~ <MouseUp>
map <M-Esc>[64~ <S-MouseDown>
map! <M-Esc>[64~ <S-MouseDown>
map <M-Esc>[65~ <S-MouseUp>
map! <M-Esc>[65~ <S-MouseUp>

nnoremap <silent> <LocalLeader>t :FZF<cr>

nmap \t :set expandtab tabstop=4 shiftwidth=4 softtabstop=4<CR>
nmap \T :set expandtab tabstop=8 shiftwidth=8 softtabstop=4<CR>
nmap \M :set noexpandtab tabstop=8 softtabstop=4 shiftwidth=4<CR>
nmap \m :set expandtab tabstop=2 shiftwidth=2 softtabstop=2<CR>

" Make the 81st column standout
" Used by all ftplugins
function FTPluginSetupCommands()
    call matchadd('ColorColumn', '\%81v', 100)
endfunction

"====[ Highlight matches when jumping to next ]====
" OR ELSE just highlight the match in red... (Damian Conway)
nnoremap <silent> n     n:call HLNext(0.4)<cr>
nnoremap <silent> N     N:call HLNext(0.4)<cr>
highlight WhiteOnRed ctermfg=white ctermbg=red
function! HLNext (blinktime)
    let [bufnum, lnum, col, off] = getpos('.')
    let matchlen = strlen(matchstr(strpart(getline('.'),col-1),@/))
    let target_pat = '\c\%#'.@/
    let ring = matchadd('WhiteOnRed', target_pat, 101)
    redraw
    exec 'sleep ' . float2nr(a:blinktime * 1000) . 'm'
    call matchdelete(ring)
    redraw
endfunction

" Don't use vim's keyword completion on <tab>
"let g:SuperTabDefaultCompletionType = 'context'
" Not sure why I need this, but it prevents an extra <cr> after selecting a
" completion option
let g:SuperTabCrMapping = 0
let g:SuperTabDefaultCompletionType = '<c-n>'
let g:SuperTabClosePreviewOnPopupClose = 1

" run :GoBuild or :GoTestCompile based on the go file
function! s:build_go_files()
  let l:file = expand('%')
  if l:file =~# '^\f\+_test\.go$'
    call go#cmd#Test(0, 1)
  elseif l:file =~# '^\f\+\.go$'
    call go#cmd#Build(0)
  endif
endfunction

au FileType go nmap <leader>b :<C-u>call <SID>build_go_files()<CR>
au FileType go nmap <Leader>c <Plug>(go-coverage-toggle)
au FileType go nmap <leader>e <Plug>(go-rename)
au FileType go nmap <leader>r :GoTest<CR>
au FileType go nmap <leader>s <Plug>(go-implements)
au FileType go nmap <leader>o <Plug>(go-test)

let g:go_fmt_command = "goimports"
let g:go_metalinter_autosave_enabled = ['vet', 'golint']
"let g:go_auto_type_info = 1
set updatetime=1000
autocmd FileType go nmap <Leader>i <Plug>(go-info)
let g:go_fmt_autosave = 1

" Enables debug logging
"let g:neomake_logfile = '/tmp/neomake.log'
