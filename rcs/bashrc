#
# Loaded for each terminal and sourced at login by .bash_profile.
#

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# Make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh /usr/bin/lesspipe)"

# Enable programmable completion features (you don't need to enable this, if
# it's already enabled in /etc/bash.bashrc and /etc/profile sources
# /etc/bash.bashrc).
if [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
fi

set -o vi                         # Run bash with vi keys instead of emacs
shopt -s checkwinsize
shopt -s histappend
shopt -s cdspell                  # Let bash help you change directories when you can't spell

# F7 sources .bashrc
bind '"\e[18~":"source ~/.bashrc\n"'

export HISTCONTROL=ignoredups
export PROMPT_COMMAND='history -a'
export LS_DFLT_ARGS="--color=auto"
export EDITOR=vim
export LESS=mqeisz-2XR 		            # -R is important for escape sequences
export TERM=xterm-256color                  # this is for solarized
export PYTHONDONTWRITEBYTECODE=1            # stop littering
export FZF_DEFAULT_COMMAND='ag -l -g ""'     # ag for showing only interesting files
#export FZF_CTRL_T_COMAMAND=$FZF_DEFAULT_COMMAND

# Add potentially box specific directories in default.env
export PATH=\
/usr/local/bin:\
/usr/local/sbin:\
/usr/bin:\
/usr/sbin:\
/bin:\
/sbin:\
~/.local/bin:\
~/.rvm/bin

#
# Source the configuration for these dotfiles of which this file is a part.
#
# This assumes the install script has been run and .bashrc is a link pointing
# into the dotfiles repo.
#
bashrc_location=$(readlink -f ~/.bashrc)
dotfiles_dir=${bashrc_location%/rcs/bashrc}
. $dotfiles_dir/config.env

# Setup Gruf to aid working on multiple projects simultaneously
# http://github.com/svrana/gruf
if [ -d ~/repos/gruf ]; then
    source ~/repos/gruf/gruf.rc
fi

# unbind ctrl-s/-q from konsole
stty -ixon

# Powerline setup (I like it pretty)
#
# Include powerline in path, it's installed via pip
eval `dircolors ~/.dircolors`
if [ -f ~/.local/lib/python2.7/site-packages/powerline/bindings/bash/powerline.sh ]; then
    . ~/.local/lib/python2.7/site-packages/powerline/bindings/bash/powerline.sh
fi

# rvm required config
export rvmsudo_secure_path=1
[[ -s "$RVM_PATH/scripts/rvm" ]] && . "$RVM_PATH/scripts/rvm"


# Make virtualenvwrapper use the .virtualenv file to find the current
# python virtual environment.
function prompt
{
    if [ "$PWD" != "$MYOLDPWD" ]; then
        MYOLDPWD="$PWD"
        test -e .venv && workon `cat .venv`
    fi
}

OLD_PC=$PROMPT_COMMAND # hack to keep powerline working
PROMPT_COMMAND='prompt ; $OLD_PC'

export DIRENV_LOG_FORMAT=
eval "$(direnv hook bash)"
