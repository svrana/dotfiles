#!/usr/bin/env ruby
#
# Command line program that prints binary representation of input integer.
#
# Requires Ruby for 2.0.0+ (for bit_length)

$banner = <<-EOS
Print the binary representation of the specified integer

Usage:
  #{File.basename($0)} [params] integer

   -e   Input is an expression that evaluates to an integer
   -g   Group bytes
EOS

def usage
  puts $banner
end

#
#
# @param [Fixnum|Bignum] int
# @return String of 0s and 1s representing positions of bits of int
def int_to_bitstr(int)
  if int.bit_length < 32
    length = 31
  else
    length = 63
  end

  length.downto(0).map { |i| int[i] }.join
end

def display_bitstr(bitstr, group=false)
  formatted_str = ''
  length = bitstr.length - 1

  0.upto(length) do |i|
    if group
      formatted_str << ' 'if (i != 0 && i % 8 == 0)
    end
    formatted_str << bitstr[i]
  end

  puts formatted_str
end

evaluate = false
group = false
input = ''

loop do
  case ARGV[0]
  when '-e' then
    ARGV.shift
    evaluate = true
    input = ARGV.shift
  when '-g' then
    ARGV.shift
    group = true
  when /^-/ then
    puts "Invalid option: #{ARGV[0].inspect}"
    exit 1
  else
    break
  end
end

if !evaluate
  if ARGV.length < 1
    usage
    exit 1
  else
    input = ARGV.shift
  end
end

input = eval(input) if evaluate
bitstr = int_to_bitstr(input.to_i)
display_bitstr(bitstr, group)
