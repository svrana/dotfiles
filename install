#!/bin/bash
#
# Creates defaults directories configured in config.env; copies or links
# configuration files into place as appropriate, installs packages.
#
# This needs to be run once.
#

CURRENT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

function _powerline_install() {
    if [ ! -f ~/.local/bin/powerline ]; then
        pip install --user powerline-status
    fi
}

function _go_config() {
    if [ -n "$GOPATH" ]; then
        go get -u github.com/nsf/gocode
        "$GOPATH/src/github.com/nsf/gocode/nvim/symlink.sh" > /dev/null 2>&1
    fi
}

function _fetch_apps() {
    if [ ! -d "$APPS/gruf" ]; then
        git clone https://github.com/svrana/gruf.git "$APPS/gruf"
        estatus "Cloned gruf"
    fi

    if [ ! -d "$GOPATH/src/github.com/svrana/powerline-go" ]; then
        go get -u github.com/svrana/powerline-go
        pushd $GOPATH/src/github.com/svrana/powerline-go
        go install
        popd
        ln -sf $GOPATH/src/github.com/svrana/powerline-go $HOME/Projects/powerline-go
    fi

    if [ ! -d "$APPS/solarize" ]; then
        git clone https://github.com/gmodarelli/solarize.git "$APPS/solarize"
        "$APPS/solarize/solarize.sh" dark
        estatus "Cloned solarize repo"
    fi

    if [ ! -d "$GOPATH/src/github.com/direnv" ]; then
        go get -u github.com/direnv/direnv
        cd "$GOPATH/src/github.com/direnv/direnv"
        make && sudo make install
    fi

    if [ ! -d ~/.config/nvim/bundle/Vundle.vim ]; then
        git clone https://github.com/VundleVim/Vundle.vim.git ~/.config/nvim/bundle/Vundle.vim
        estatus "Cloned Vundle"
    fi

    if [ ! -f ~/.config/nvim/init.vim ]; then
        mkdir ~/.config/nvim
        ln -sf "${RC_DIR}/vimrc" ~/.config/nvim/init.vim
        sudo update-alternatives --install /usr/bin/vi vi /usr/bin/nvim 60
        sudo update-alternatives --install /usr/bin/vim vim /usr/bin/nvim 60
        sudo update-alternatives --install /usr/bin/editor editor /usr/bin/nvim 60
    fi

    if [ ! -d "$APPS/fzf" ]; then
        git clone --depth 1 https://github.com/junegunn/fzf.git "$APPS/fzf"
        "$APPS/fzf/install" --bin
        ln -sf "$APPS/fzf/bin/fzf" "${BIN_DIR}/fzf"
        ln -sf "$APPS/fzf/bin/fzf-tmux" "${BIN_DIR}/fzf-tmux"
        mkdir -p ~/.config/fzf
        ln -sf "${RC_DIR}/fzf.bash" ~/.config/fzf/fzf.bash
    fi

    if [ ! -d "$APPS/fonts" ]; then
        git clone https://github.com/powerline/fonts.git "$APPS/fonts"
        "$APPS/fonts/install.sh"
    fi

    if [ ! -d "$HOME/.tmux/plugins/tpm" ]; then
        git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
    fi

    nvim +PluginInstall +qall +GoInstallBinaries
    ~/.tmux/plugins/tpm/bin/install_plugins
    ~/.tmux/plugins/tpm/bin/clean_plugins

    _powerline_install
    _go_config
}

function _make_dirs() {
    mkdir -p "$BIN_DIR"
    mkdir -p "$DOWNLOADS"
    mkdir -p "$APPS"

    mkdir -p ~/.config/nvim/{bak,swp}
    mkdir -p ~/.config/nvim/after/ftplugin
    mkdir -p ~/.config/nvim/bundle
    mkdir -p ~/.config/nvim/autoload
    mkdir -p ~/.config/psql

    mkdir -p ~/.config/fontconfig/conf.d
    mkdir -p ~/.fonts

    mkdir -p ~/.kitchen
    mkdir -p ~/.config/alacritty
    mkdir -p ~/.config/powerline/themes/{shell,tmux}
    mkdir -p ~/.local/share/applications
    mkdir -p ~/.tmux/plugins
    mkdir -p ~/.ipython/profile_default

    egood "Created default directories"
}

function _link_dirs() {
    ln -Tsf "$CLOUD_ROOT/Documents" "$DOCUMENTS"
    ln -Tsf "$CLOUD_ROOT/Music" "$MUSIC"
    ln -Tsf "$CLOUD_ROOT/Pictures" "$PHOTOS"
}

function _link_ftplugins() {
    for i in $(dolisting rcs/ftplugin/*)
    do
        i=$(basename "$i")
        ln -sf "$DOTFILES_DIR/rcs/ftplugin/$i" ~/.config/nvim/after/ftplugin/"$i"
    done
}

function _link_configs() {
    ln -sf "${RC_DIR}/bash_profile" ~/.bash_profile
    ln -sf "${RC_DIR}/bashrc" ~/.bashrc
    ln -sf "${RC_DIR}/zshrc" ~/.zshrc
    ln -sf "${RC_DIR}/vimrc" ~/.vimrc
    ln -sf "${RC_DIR}/tmux.conf" ~/.tmux.conf
    ln -sf "${RC_DIR}/gitconfig" ~/.gitconfig
    ln -sf "${RC_DIR}/gitignore_global" ~/.gitignore_global
    ln -sf "${RC_DIR}/rvmrc" ~/.rvmrc
    ln -sf "${RC_DIR}/ackrc" ~/.ackrc
    ln -sf "${RC_DIR}/psqlrc" ~/.psqlrc
    ln -sf "${RC_DIR}/kitchen-config.yml" ~/.kitchen/config.yml
    ln -sf "${RC_DIR}/ctags" ~/.ctags
    ln -sf "${RC_DIR}/alacritty.yml" ~/.config/alacritty/alacritty.yml
    ln -sf "${RC_DIR}/powerline-shell.json" ~/.config/powerline/themes/shell/default.json
    ln -sf "${RC_DIR}/powerline-tmux.json" ~/.config/powerline/themes/tmux/default.json
    ln -sf "${RC_DIR}/ipython_config.py" ~/.ipython/profile_default/ipython_config.py

    ln -sf "${DOTFILES_DIR}/misc/alacritty.desktop" ~/.local/share/applications
    ln -sf "${DOTFILES_DIR}/misc/dircolors.ansi-dark" ~/.dircolors
    ln -sf "${DOTFILES_DIR}/misc/PowerlineSymbols.otf" ~/.fonts/PowerlineSymbols.otf
    ln -sf "${DOTFILES_DIR}/misc/50-enable-terminess-powerline.conf" ~/.config/fontconfig/conf.d/

    egood "Created home directory file links"

    _link_ftplugins
}

function _prep_scripts() {
    for i in $(dolisting "$SCRIPT_DIR"/*)
    do
        chmod +x "$i"
    done
    egood "Added execute permission to scripts in $SCRIPT_DIR"

    for i in $(dolisting "$SCRIPT_DIR/*")
    do
        i=$(basename "$i")
        ln -sf "${SCRIPT_DIR}/$i" "${BIN_DIR}/$i"
    done
    egood "Created links in ${BIN_DIR} to scripts in $SCRIPT_DIR"
}

function _prep_fonts() {
    fc-cache -vf ~/.fonts > /dev/null 2>&1
    estatus "Built font cache for powerline"
}

function _chef_bootstrap() {
    local force=${1:-"false"}

    local first_run=$(which chef-solo)
    if [ -z "$first_run" ]; then
        curl -L https://omnitruck.chef.io/install.sh -o "$TMP/install.sh"
        sudo bash /tmp/install.sh -P chefdk
        estatus "Installed chefdk"
        rm /tmp/install.sh > /dev/null 2>&1
    fi

    if [[ -z "$first_run" || "$force" = "true" ]]; then
        "$DOTFILES_DIR/scripts/chef-up"
        estatus "Ran chef-solo"
    else
        egood "Skipped chef-solo run"
    fi
}

# Must have directories set so applications no where to be installed
for dependency in directories.sh functions.sh plugins/go.sh
do
    . "$CURRENT_DIR/$dependency"
done
unset dependency

force_chef_run="false"
while getopts f opt
do
    case "$opt" in
        f)  force_chef_run="true";;
        \?)   # unknown flag
            echo >&2 \
                "usage: $0 [-f force chef-solo run ]"
            exit 1;;
    esac
done
shift "$((OPTIND-1))"

_chef_bootstrap "$force_chef_run"
_make_dirs
_link_dirs
_link_configs
_prep_scripts
_prep_fonts
_fetch_apps

unset force_chef_run
unset CURRENT_DIR
