#!/bin/bash
#
# Creates defaults directories configured in config.env; runs
# plugin install functions and install scripts.
#
# This needs to be run once.
#

_install_deps=(
    directories.sh  # directory names are used throughout
    functions.sh    # used for helper functions
    plugins/go.sh   # neovim installer uses go
)

# Must have directories set so applications no where to be installed
cwd="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
for dep in "${_install_deps[@]}" ; do
    . "$cwd/$dep"
done

# A list of installers in $DOTFILES/installers that will be sourced during
# install. These are typically actions that need only be done once and for
# which there might not be a corresponding plugin.
INSTALLERS=(
    alacritty
    fd
    neovim
    powerline
    ripgrep
    solarize
)

# A list of directories that should be created.
CREATE_DIRS=(
    $BIN_DIR
    $DOWNLOADS
    $APPS
    $PROJECTS

    ~/.config/psql
    ~/.config/fontconfig/conf.d
    ~/.kitchen
    ~/.local/share/applications
    ~/.ipython/profile_default
)

# A list of symbolic links that point to directories that should be created.
DIR_LINKS=(
    # Target                        Link name
    "$CLOUD_ROOT/Documents          $DOCUMENTS"
    "$CLOUD_ROOT/Music              $MUSIC"
    "$CLOUD_ROOT/Pictures           $PHOTOS"
)

# A list of symbolic links pointing to files that should be created.
FILE_LINKS=(
    # Target                        Link name
    "${RCS}/bash_profile         ~/.bash_profile"
    "${RCS}/bashrc               ~/.bashrc"
    "${RCS}/gitconfig            ~/.gitconfig"
    "${RCS}/gitignore_global     ~/.gitignore_global"
    "${RCS}/rvmrc                ~/.rvmrc"
    "${RCS}/ackrc                ~/.ackrc"
    "${RCS}/psqlrc               ~/.psqlrc"
    "${RCS}/kitchen-config.yml   ~/.kitchen/config.yml"
    "${RCS}/ctags                ~/.ctags"
    "${RCS}/ipython_config.py    ~/.ipython/profile_default/ipython_config.py"
)


#
# Run the install function for each plugin in use.
#
function _install_plugins() {
    local plugins
    plugins=$(sed -rn '/export DOTFILE_PLUGINS=\(.*/','/\)/'p "$RCS/bashrc" | \
        sed 's/#.*//' | sed 's/export DOTFILE_PLUGINS=(//' | tr -d ')\n')

    for plugin in $plugins ; do
        source "$DOTFILES/plugins/${plugin}.sh"
        if type "__dotfiles_${plugin}_install" > /dev/null 2>&1; then
            echo -n "Running install for $plugin plugin"
            eval "__dotfiles_${plugin}_install"
            estatus
        fi
    done
}

#
# Runs each of the installers specified in the INSTALLERS array.
#
function _run_installers() {
    for installer in ${INSTALLERS[*]}; do
        local location="$DOTFILES/installers/${installer}.sh"
        if [ ! -f "$location" ]; then
            echo "Installer $installer missing"
            return 1
        fi
        echo -n "Configuring $installer"
        source "$location"
        estatus
    done
}

#
# Link each script in ./scripts to a directory in your path specified by
# $BIN_DIR.
#
function _prep_scripts() {
    local i
    local scripts="$DOTFILES/scripts"

    for i in $(dolisting "$scripts"/*) ; do
        chmod +x "$i"
    done
    egood "Added execute permission to scripts in $scripts"

    for i in $(dolisting "$scripts/*") ; do
        i=$(basename "$i")
        ln -sf "${scripts}/$i" "${BIN_DIR}/$i"
    done
    egood "Created links in ${BIN_DIR} to scripts in $scripts"
}

#
# Run chef solo. Only for package installation at this time.
#
function _chef_bootstrap() {
    local force=${1:-"false"}

    local first_run=$(which chef-solo)
    if [ -z "$first_run" ]; then
        curl -L https://omnitruck.chef.io/install.sh -o "$TMP/install.sh"
        sudo bash /tmp/install.sh -P chefdk
        estatus "Installed chefdk"
        rm /tmp/install.sh > /dev/null 2>&1
    fi

    if [[ -z "$first_run" || "$force" = "true" ]]; then
        "$DOTFILES/scripts/chef-up"
        estatus "Ran chef-solo"
    else
        egood "Skipped chef-solo run"
    fi
}

#
# Create a symbolic link for each entry speciied in the FILE_LINKS and
# DIR_LINKS arrays.
#
function _make_links() {
    local spec
    for link_spec in "${DIR_LINKS[@]}" ; do
        spec=$(echo "$link_spec" | tr -s ' ')
        local target=${spec%% *}
        local link=${spec#* }
        ln -Tsf "$target" "$link"
    done
    egood "Created directory links"

    for link_spec in "${FILE_LINKS[@]}" ; do
        spec=$(echo "$link_spec" | tr -s ' ')
        local target=${spec%% *}
        local link=${spec#* }
        ln -sf "$target" "${link/#~/$HOME}" # expand ~/ to $HOME
    done

    egood "Created file links"
}

#
# Create each direcctory specified in the CREATE_DIRS array.
#
function _make_dirs() {
    for dir in "${CREATE_DIRS[@]}" ; do
        mkdir -p "${dir/#~/$HOME}"
    done

    egood "Created default directories"
}

main() {
    local force_chef_run="false"
    while getopts f opt
    do
        case "$opt" in
            f)  force_chef_run="true";;
            \?)   # unknown flag
                echo >&2 \
                    "usage: $0 [-f force chef-solo run ]"
                exit 1;;
        esac
    done
    shift "$((OPTIND-1))"

    _chef_bootstrap "$force_chef_run"
    _make_dirs
    _make_links
    _prep_scripts
    _run_installers
    _install_plugins
}

main
