#!/bin/bash
#
# Creates defaults directories setup in directories.env; copies or links
# configuration files into place as appropriate.
#
# This needs to be once.
#

fetch_repos() {
    if [ ! -d ~/repos/solarize ]; then
        git clone https://github.com/gmodarelli/solarize.git ~/repos/solarize
        estatus "Cloned solarize repo"
    fi

    if [ ! -d ~/.vim/bundle/command-t ]; then
        git clone https://github.com/wincent/Command-T.git ~/.vim/bundle/command-t
        estatus "Cloned Command-t repo"
    fi

    if [ ! -d ~/.vim/bundle/vim-colors-solarized ]; then
        git clone git://github.com/altercation/vim-colors-solarized.git ~/.vim/bundle/vim-colors-solarized
        estatus "Cloned vim-colors-solarized repo"
    fi

    if [ ! -d ~/.vim/bundle/vim-fugitive ]; then
        git clone https://github.com/tpope/vim-fugitive.git ~/.vim/bundle/vim-fugitive
        estatus "Cloned vim-fugitive repo"
    fi

    if [ ! -f ~/.vim/autoload/pathogen.vim ]; then
        curl -Sso ~/.vim/autoload/pathogen.vim https://raw.github.com/tpope/vim-pathogen/master/autoload/pathogen.vim
        estatus "Installed pathogen"
    fi

    if [ ! -d ~/.vim/bundle/DeleteTrailingWhitespace ]; then
        git clone https://github.com/vim-scripts/DeleteTrailingWhitespace.git ~/.vim/bundle/DeleteTrailingWhitespace
        estatus "Cloned DeleteTrailingWhitespace"
    fi

    if [ ! -d ~/.vim/bundle/matchit ]; then
        git clone https://github.com/vim-scripts/matchit.zip.git ~/.vim/bundle/matchit
        estatus "Cloned matchit"
    fi
}

powerline_install() {
    if [ ! -f ~/.local/bin/powerline ]; then
        pip install --user git+git://github.com/Lokaltog/powerline
    fi
}

current_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
# Setup defaults required by these dotfiles
. ${current_dir}/config.env

mkdir -p $BIN_DIR
mkdir -p $MY_TMP
mkdir -p ~/.bak
mkdir -p ~/.config/fontconfig/conf.d
mkdir -p ~/.fonts
mkdir -p ~/.vim/swp
mkdir -p ~/.vim/bundle
mkdir -p ~/.vim/autoload

if [ "${HOME}" != "/root" ]; then
    mkdir -p ~/apps
    mkdir -p ~/repos

    mkdir -p $DOCUMENTS
    mkdir -p $MUSIC
    mkdir -p $PHOTOS
    mkdir -p $DOWNLOADS

    ln -Tsf $DOCUMENTS/playlists/ ~/Playlists
fi

egood "Created default directories as specified in $current_dir/directories.env"

ln -sf ${RC_DIR}/bash_profile 	    ~/.bash_profile
ln -sf ${RC_DIR}/bashrc             ~/.bashrc
ln -sf ${RC_DIR}/vimrc              ~/.vimrc
ln -sf ${RC_DIR}/tmux.conf 	    ~/.tmux.conf
ln -sf ${RC_DIR}/gitconfig          ~/.gitconfig
ln -sf ${RC_DIR}/eclimrc            ~/.eclimrc
ln -sf ${RC_DIR}/rvmrc              ~/.rvmrc
ln -sf ${RC_DIR}/10-powerline-symbols.conf      ~/.config/fontconfig/conf.d/10-powerline-symbols.conf
ln -sf ${CONFIG_DIR}/misc/dircolors.ansi-dark   ~/.dircolors
ln -sf ${CONFIG_DIR}/misc/PowerlineSymbols.otf  ~/.fonts/PowerlineSymbols.otf

egood "Created home directory file links"

fc-cache -vf ~/.fonts > /dev/null 2>&1
estatus "Built font cache for powerline"

for i in $(ls -1 $SCRIPT_DIR)
do
    chmod +x ${SCRIPT_DIR}/$i
done
egood "Added execute permission to scripts in $SCRIPT_DIR"

for i in $(ls -1 $SCRIPT_DIR)
do
    ln -sf ${SCRIPT_DIR}/$i ${BIN_DIR}/$i
done
egood "Created links in ${BIN_DIR} to scripts in $SCRIPT_DIR"

if [ "${HOME}" != "/root" ]; then
    fetch_repos
    powerline_install
fi

source ~/.bashrc
