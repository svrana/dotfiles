#!/bin/bash
#
# Creates defaults directories setup in directories.env; copies or links
# configuration files into place as appropriate.
#
# This needs to be run once.
#

function fetch_repos() {
    if [ ! -e ~/.tmux/plugins/tpm ]; then
        git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
        tmux source ~/.tmux.conf
    fi

    if [ ! -e /usr/bin/pip ]; then
        sudo apt-get install curl python-pip python-dev build-essential
    fi

    if [ ! -d ~/repos/gruf ]; then
        git clone https://github.com/svrana/gruf.git ~/repos/gruf
        estatus "Cloned gruf"
    fi

    if [ ! -d ~/repos/solarize ]; then
        git clone https://github.com/gmodarelli/solarize.git ~/repos/solarize
        ~/repos/solarize/solarize.sh dark
        estatus "Cloned solarize repo"
    fi

    if [ ! -d ~/.vim/bundle/Vundle.vim ]; then
        git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
        estatus "Cloned Vundle"
    fi

    if [ ! -f ~/.config/nvim/init.vim ]; then
        mkdir ~/.config/nvim
        ln -sf ${RC_DIR}/vimrc ~/.config/nvim/init.vim
        sudo update-alternatives --install /usr/bin/vi vi /usr/bin/nvim 60
        sudo update-alternatives --install /usr/bin/vim vim /usr/bin/nvim 60
        sudo update-alternatives --install /usr/bin/editor editor /usr/bin/nvim 60
    fi

    if [ ! -d ~/repos/fzf ]; then
        git clone --depth 1 https://github.com/junegunn/fzf.git ~/repos/fzf
        pushd ~/repos/fzf && ./install && popd
        ln -sf ~/repos/fzf/bin/fzf ${BIN_DIR}/fzf
        ln -sf ~/repos/fzf/bin/fzf-tmux ${BIN_DIR}/fzf-tmux
        mkdir -p ~/.config/fzf
        ln -sf ${RC_DIR}/fzf.bash ~/.config/fzf/fzf.bash
    fi

    if [ ! -d ~/repos/fonts ]; then
        git clone https://github.com/powerline/fonts.git ~/repos/fonts
        ~/repos/fonts/install.sh
    fi

    nvim +PluginInstall +qall +GoInstallBinaries
}

function powerline_install() {
    if [ ! -f ~/.local/bin/powerline ]; then
        pip install --user git+git://github.com/powerline/powerline
    fi
}

current_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Setup defaults required by these dotfiles
. ${current_dir}/config.env


mkdir -p $BIN_DIR
mkdir -p ~/.config/nvim/bak
mkdir -p ~/.config/fontconfig/conf.d
mkdir -p ~/.fonts
mkdir -p ~/.vim/swp
mkdir -p ~/.vim/bundle
mkdir -p ~/.vim/autoload
mkdir -p ~/.kitchen
mkdir -p ~/.config/alacritty
mkdir -p ~/.config/powerline
mkdir -p ~/.local/share/applications
mkdir -p ~/.tmux/plugins

if [ "${HOME}" != "/root" ]; then
    mkdir -p ~/apps
    mkdir -p ~/repos

    mkdir -p $DOWNLOADS

    ln -Tsf $DROPBOX_ROOT/Documents $DOCUMENTS
    ln -Tsf $DROPBOX_ROOT/Music $MUSIC
    ln -Tsf $DROPBOX_ROOT/Pictures $PHOTOS
fi

egood "Created default directories as specified in $current_dir/directories.env"

ln -sf ${RC_DIR}/bash_profile 	    ~/.bash_profile
ln -sf ${RC_DIR}/bashrc             ~/.bashrc
ln -sf ${RC_DIR}/zshrc              ~/.zshrc
ln -sf ${RC_DIR}/vimrc              ~/.vimrc
ln -sf ${RC_DIR}/tmux.conf 	    ~/.tmux.conf
ln -sf ${RC_DIR}/gitconfig          ~/.gitconfig
ln -sf ${RC_DIR}/rvmrc              ~/.rvmrc
ln -sf ${RC_DIR}/ackrc              ~/.ackrc
ln -sf ${RC_DIR}/psqlrc             ~/.psqlrc
ln -sf ${RC_DIR}/kitchen-config.yml ~/.kitchen/config.yml
ln -sf ${RC_DIR}/ctags              ~/.ctags
ln -sf ${RC_DIR}/alacritty.yml 	    ~/.config/alacritty/alacritty.yml
ln -sf ${RC_DIR}/powerline-shell.json ~/.config/powerline

ln -sf $CONFIG_DIR/misc/alacritty.desktop ~/.local/share/applications

ln -sf ${CONFIG_DIR}/misc/dircolors.ansi-dark   ~/.dircolors
ln -sf ${CONFIG_DIR}/misc/PowerlineSymbols.otf  ~/.fonts/PowerlineSymbols.otf
ln -sf ${CONFIG_DIR}/misc/50-enable-terminess-powerline.conf ~/.config/fontconfig/conf.d/
ln -sf ~/repos/pidcat/pidcat.py ${BIN_DIR}/pidcat

mkdir -p ~/.ipython/profile_default
ln -sf ${RC_DIR}/ipython_config.py ~/.ipython/profile_default/ipython_config.py

egood "Created home directory file links"


fc-cache -vf ~/.fonts > /dev/null 2>&1
estatus "Built font cache for powerline"

for i in $(ls -1 $SCRIPT_DIR)
do
    chmod +x ${SCRIPT_DIR}/$i
done
egood "Added execute permission to scripts in $SCRIPT_DIR"

for i in $(ls -1 $SCRIPT_DIR)
do
    ln -sf ${SCRIPT_DIR}/$i ${BIN_DIR}/$i
done
egood "Created links in ${BIN_DIR} to scripts in $SCRIPT_DIR"

if [ "${HOME}" != "/root" ]; then
    fetch_repos
    powerline_install
    go get -u github.com/nsf/gocode
    $GOPATH/src/github.com/nsf/gocode/nvim/symlink.sh > /dev/null 2>&1
fi

mkdir -p ~/.config/nvim/ftplugin
for i in $(ls -1 ftplugin)
do
    ln -sf $current_dir/ftplugin/$i ~/.config/nvim/ftplugin/$i
done
