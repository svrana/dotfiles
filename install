#!/bin/bash
#
# Creates defaults directories configured in config.env; runs
# plugin install functions and install scripts.
#
# This needs to be run once.
#

CURRENT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"


function _install_plugins() {
    local plugins
    plugins=$(sed -rn '/export DOTFILE_PLUGINS=\(.*/','/\)/'p "$RC_DIR/bashrc" | \
        sed 's/#.*//' | sed 's/export DOTFILE_PLUGINS=(//' | tr -d ')\n')

    for plugin in $plugins ; do
        source "$DOTFILES_DIR/plugins/${plugin}.sh"
        if type "__dotfiles_${plugin}_install" > /dev/null 2>&1; then
            eval "__dotfiles_${plugin}_install"
            estatus "Ran install for $plugin plugin"
        fi
    done
}

function _run_installers() {
     local i
     for installer in $(dolisting "$CURRENT_DIR"/installers/*); do
         source "$installer"
         local name
         name=$(basename "$installer")
         estatus "Configured ${name/.sh/}"
     done
}

function _make_dirs() {
    mkdir -p "$BIN_DIR"
    mkdir -p "$DOWNLOADS"
    mkdir -p "$APPS"
    mkdir -p "$PROJECTS"

    mkdir -p ~/.config/psql
    mkdir -p ~/.config/fontconfig/conf.d
    mkdir -p ~/.kitchen
    mkdir -p ~/.local/share/applications
    mkdir -p ~/.ipython/profile_default

    egood "Created default directories"
}

function _link_dirs() {
    ln -Tsf "$CLOUD_ROOT/Documents" "$DOCUMENTS"
    ln -Tsf "$CLOUD_ROOT/Music" "$MUSIC"
    ln -Tsf "$CLOUD_ROOT/Pictures" "$PHOTOS"
}

function _link_configs() {
    ln -sf "${RC_DIR}/bash_profile" ~/.bash_profile
    ln -sf "${RC_DIR}/bashrc" ~/.bashrc
    ln -sf "${RC_DIR}/zshrc" ~/.zshrc
    ln -sf "${RC_DIR}/gitconfig" ~/.gitconfig
    ln -sf "${RC_DIR}/gitignore_global" ~/.gitignore_global
    ln -sf "${RC_DIR}/rvmrc" ~/.rvmrc
    ln -sf "${RC_DIR}/ackrc" ~/.ackrc
    ln -sf "${RC_DIR}/psqlrc" ~/.psqlrc
    ln -sf "${RC_DIR}/kitchen-config.yml" ~/.kitchen/config.yml
    ln -sf "${RC_DIR}/ctags" ~/.ctags
    ln -sf "${RC_DIR}/ipython_config.py" ~/.ipython/profile_default/ipython_config.py

    egood "Created home directory file links"
}

function _prep_scripts() {
    local i

    for i in $(dolisting "$SCRIPT_DIR"/*) ; do
        chmod +x "$i"
    done
    egood "Added execute permission to scripts in $SCRIPT_DIR"

    for i in $(dolisting "$SCRIPT_DIR/*") ; do
        i=$(basename "$i")
        ln -sf "${SCRIPT_DIR}/$i" "${BIN_DIR}/$i"
    done
    egood "Created links in ${BIN_DIR} to scripts in $SCRIPT_DIR"
}

function _chef_bootstrap() {
    local force=${1:-"false"}

    local first_run=$(which chef-solo)
    if [ -z "$first_run" ]; then
        curl -L https://omnitruck.chef.io/install.sh -o "$TMP/install.sh"
        sudo bash /tmp/install.sh -P chefdk
        estatus "Installed chefdk"
        rm /tmp/install.sh > /dev/null 2>&1
    fi

    if [[ -z "$first_run" || "$force" = "true" ]]; then
        "$DOTFILES_DIR/scripts/chef-up"
        estatus "Ran chef-solo"
    else
        egood "Skipped chef-solo run"
    fi
}

# Must have directories set so applications no where to be installed
for dependency in directories.sh functions.sh plugins/go.sh ; do
    . "$CURRENT_DIR/$dependency"
done
unset dependency

force_chef_run="false"
while getopts f opt
do
    case "$opt" in
        f)  force_chef_run="true";;
        \?)   # unknown flag
            echo >&2 \
                "usage: $0 [-f force chef-solo run ]"
            exit 1;;
    esac
done
shift "$((OPTIND-1))"

_chef_bootstrap "$force_chef_run"
_make_dirs
_link_dirs
_link_configs
_prep_scripts
_run_installers
_install_plugins

unset force_chef_run
unset CURRENT_DIR
